Program name philo
Turn in files Makefile, *.h, *.c, in directory philo/
Makefile NAME, all, clean, fclean, re
Arguments number_of_philosophers time_to_die time_to_eat
time_to_sleep
[number_of_times_each_philosopher_must_eat]
External functs. memset, printf, malloc, free, write,
usleep, gettimeofday, pthread_create,
pthread_detach, pthread_join, pthread_mutex_init,
pthread_mutex_destroy, pthread_mutex_lock,
pthread_mutex_unlock
Libft authorized No
Description Philosophers with threads and mutexes

-> NO LIBFT
-> ALL IN PHILO DIRECTORY

..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|

Here are the things you need to know if you want to succeed this assignment:
• One or more philosophers sit at a round table.
There is a large bowl of spaghetti in the middle of the table.
• The philosophers alternatively eat, think, or sleep.
While they are eating, they are not thinking nor sleeping;
while thinking, they are not eating nor sleeping;
and, of course, while sleeping, they are not eating nor thinking.
• There are also forks on the table. There are as many forks as philosophers.
• Because serving and eating spaghetti with only one fork is very inconvenient, a
philosopher takes their right and their left forks to eat, one in each hand.
• When a philosopher has finished eating, they put their forks back on the table and
start sleeping. Once awake, they start thinking again. The simulation stops when
a philosopher dies of starvation.
• Every philosopher needs to eat and should never starve.
• Philosophers don’t speak with each other.
• Philosophers don’t know if another philosopher is about to die.
• No need to say that philosophers should avoid dying!

You have to write a program for the mandatory part and another one for the bonus part
(if you decide to do the bonus part). They both have to comply with the following rules:
• Global variables are forbidden!
• Your(s) program(s) should take the following arguments:
number_of_philosophers time_to_die time_to_eat time_to_sleep
[number_of_times_each_philosopher_must_eat]
◦ number_of_philosophers: The number of philosophers and also the number
of forks.
◦ time_to_die (in milliseconds): If a philosopher didn’t start eating time_to_die
milliseconds since the beginning of their last meal or the beginning of the simulation, they die.
◦ time_to_eat (in milliseconds): The time it takes for a philosopher to eat.
During that time, they will need to hold two forks.
◦ time_to_sleep (in milliseconds): The time a philosopher will spend sleeping.
◦ number_of_times_each_philosopher_must_eat (optional argument): If all
philosophers have eaten at least number_of_times_each_philosopher_must_eat
times, the simulation stops. If not specified, the simulation stops when a
philosopher dies.
• Each philosopher has a number ranging from 1 to number_of_philosophers.
• Philosopher number 1 sits next to philosopher number number_of_philosophers.
Any other philosopher number N sits between philosopher number N - 1 and philosopher number N + 1.
About the logs of your program:
• Any state change of a philosopher must be formatted as follows:
◦ timestamp_in_ms X has taken a fork
◦ timestamp_in_ms X is eating
◦ timestamp_in_ms X is sleeping
◦ timestamp_in_ms X is thinking
◦ timestamp_in_ms X died
Replace timestamp_in_ms with the current timestamp in milliseconds
and X with the philosopher number.
• A displayed state message should not be mixed up with another message.
• A message announcing a philosopher died should be displayed no more than 10 ms
after the actual death of the philosopher.
• Again, philosophers should avoid dying!
Your program must not have any data races.

The specific rules for the mandatory part are:
• Each philosopher should be a thread.
• There is one fork between each pair of philosophers. Therefore, if there are several
philosophers, each philosopher has a fork on their left side and a fork on their right
side. If there is only one philosopher, there should be only one fork on the table.
• To prevent philosophers from duplicating forks, you should protect the forks state
with a mutex for each of them. 

..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|

. round table
. n° forks == n° philosophers
. only one action at a time:
    eat -> sleep -> think
. eating requires two forks

Philosophers should avoid dying and fullfill the program parameters, however,
they are unable to "talk" to each other. This probably means that the threads
that represent them are unable to communicate with each other and only
with the main thread

. each philosopher is a separate thread
. main thread has the "shared" parameters for each thread:
    - number of philosophers / forks / extra threads;
    - time to eat, sleep, think, n° of times to eat;
. main thread has the "shared" variables between each thread:
    - forks available
(each thread will update the number of available forks, be it +2 or -2, so,
the number of forks will work like a "global" variable)

the number of available forks will probably be a shared variable between all the
different threads / philosophers and, as such, will be protected by a mutex
(if i have the ability to manage the behaviour of said mutex, i will probably
see which philosophers as been the longest without eating and give him the
mutex lock)

vai ser mais complicado do que isso:
• There is one fork between each pair of philosophers. Therefore, if there are several
philosophers, each philosopher has a fork on their left side and a fork on their right
side. If there is only one philosopher, there should be only one fork on the table.
• To prevent philosophers from duplicating forks, you should protect the forks state
with a mutex for each of them.

.....
- the function gettimeofday() will probable be used on the status messages when
we inform about each philosophers actions and to check if they get past the
allowed time to do the actions like eating, sleeping, thinking, etc

- how to create threads on a loop video (will use this because i will receive
the number of philosophers as an argument)

Since a thread is represented by a single function, and that each philosopher
should be represented by a single thread, that means each philosopher
will be represented by a function.
Given the looping nature of each philosopher life cycle:
"eat -> sleep -> think", we can already assume an infinite coding loop that
will execute these functions until the expected loop number is met:
◦ number_of_times_each_philosopher_must_eat (optional argument)
or until they cannot meet the stipulations and they, something, for
example, like this

void    *philosopher(t_times *times) {
    ez;
}

.....
<args>: provavelmente uma struct que contem todos os tempos passados
como argumentos ao executar o programa philosophers

struct	s_times() {
	size_t	time_to_die;
	size_t	time_to_eat;
	size_t	time_to_sleep;
};
typedef	t_times	struct s_times;

(using size_t because, since the time will be given in
milisseconds, we will probably deal with big numbers)
.....

memset() ?
void *memset(void *ptr, int value, size_t num);

usleep() function will be used to probably actually wait in
<time to sleep> milisseconds before printing each status message
and move on to the next action;
the death_checker will be started right at the beginning of the program
and reset after each meal
how can i do this?
.probably a size_t will store a gettimeofday(); make a usleep until death time;
and interrupt a usleep at the end of each meal (with a break or a continue
or something)
a thread inside a thread? uma thread para cada death_clock?

philo = thread = function
->(creating threads in a loop, np);
->(passing arguments to a thread/function);

pointer associado a uma funcao?
varias threads vao tentar access garfos diferentes, por isso os garfos
vao ter de ser criados na main thread, protegidos com mutex, e accessed
so depois

int *forks;
forks = malloc(philo_num * sizeof(int));

cada philo pode acessar ao fork[num] + fork[num - 1]
unless philo[0] que so pode acessar ao fork[num];

pthread_t   *philo;
philo = malloc(philo_num * sizeof(pthread_t));
free(philo);
...
pthread_t   philo[philo_num];
crio static ou c malloc? dá par dar free a este tipo de unidades?
tenho q aceder dentro da struct e dar free a todos os pointers individuais
dentro, por isso nao, defino static

so far so good. falta ver:
-> como gerir os tempos e death cycle;
usleep(time_to_sleep);
"finished sleeping"
usleep(time_to_think);
"finished thinking"
usleep(time_to_eat);
"finished eating"
-> como actually gerir as locks dos mutexes para cada thread/philo;
acho que basta meter pthread_mutex_lock(); para o respetivo int* na thread correspondente;
e eles automaticamente fazem isso;

acho que o tempo de thinking sou eu que decido e tenho que gerir,
provavelmente tenho que fazer calculos de acordo com o time do die
e time to eat e consoante isso decidir quando parar de pensar

eat        | sleep       think	eat
[t_eat]    | [t_sleep]	.		[t_eat]
|[t_die]		.		.		| (start eating times)

start think

death_cycle:
while (1)
usleep([time_to_die]);
->something to reset (continue?)
kill_philo();
nope, isto em si tambem requer uma thread

posso dar launch a um death_cycle e entretanto dar-lhe break

...
status messages:
. so pode haver uma status message de cada vez;
. se calhar esperar
. em caso de morte, a status message de morte nao pode demorar
mais de 10ms a aparecer;

message:
get_timestamp = (gettimeofday() - all->begin_time)
char **status;
status = malloc(4 * sizeof(char *));
status[0] = "is eating\n";
status[1] = "is sleeping\n";
status[2] = "";
status[3] = "";
printf("%d, %d, %s.\n", get_timestamp, philo_num, status);

timestamp: ms passados desde o inicio do minishell
nao podem ser os filosofos a mandar mensagem, mas sim informar do status

void	eating_status(int philo_no)
{
	pthread_mutex_lock(fork_left);
	fork_left = philo_no;
	pthread_mutex_lock(fork_right);
	fork_right = philo_no;
	pthread_mutex_lock(message_board);
	if (fork_left == philo_no && fork_right == philo_no)
		printf("get_timestamp() philo_no eating message");
	pthread_mutex_unlock(message_board);
	pthread_mutex_unlock(fork_left);
	pthread_mutex_unlock(fork_right);
}

int	*forks;
forks = malloc(all->philo_num * sizeof(int));
int i = -1;
while (forks && forks[++i] != NULL) {
	pthread_mutex_init();
}

while (death_status == 0) {
	eating_status();
	usleep(all->time_to_eat);
	thinking_status();
	// usleep(); (meto logo os meus gajos a comer, nao espero ate a ultima)
	sleeping_status();
	usleep(all->time_to_sleep);
}

mutex protected -> 1 mutex por cada fork, 1 mutex para mensagens normais,
1 mutex para death_messages
no mutex de mensagem normal, so printar se a flag de death_messages estiver desligado

(V) acho que a questao das mensagens ja resolvi
(X) life_cycle && death_cycle

life_cycle loop
passar args para cada thread de philosopher

para ter um real-time death clock, preciso de manter um loop continuamente ativo
isso requer uma thread extra por filosofo