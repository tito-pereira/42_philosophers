Program name philo
Turn in files Makefile, *.h, *.c, in directory philo/
Makefile NAME, all, clean, fclean, re
Arguments number_of_philosophers time_to_die time_to_eat
time_to_sleep
[number_of_times_each_philosopher_must_eat]
External functs. memset, printf, malloc, free, write,
usleep, gettimeofday, pthread_create,
pthread_detach, pthread_join, pthread_mutex_init,
pthread_mutex_destroy, pthread_mutex_lock,
pthread_mutex_unlock
Libft authorized No
Description Philosophers with threads and mutexes

-> NO LIBFT
-> ALL IN PHILO DIRECTORY

..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|

Here are the things you need to know if you want to succeed this assignment:
• One or more philosophers sit at a round table.
There is a large bowl of spaghetti in the middle of the table.
• The philosophers alternatively eat, think, or sleep.
While they are eating, they are not thinking nor sleeping;
while thinking, they are not eating nor sleeping;
and, of course, while sleeping, they are not eating nor thinking.
• There are also forks on the table. There are as many forks as philosophers.
• Because serving and eating spaghetti with only one fork is very inconvenient, a
philosopher takes their right and their left forks to eat, one in each hand.
• When a philosopher has finished eating, they put their forks back on the table and
start sleeping. Once awake, they start thinking again. The simulation stops when
a philosopher dies of starvation.
• Every philosopher needs to eat and should never starve.
• Philosophers don’t speak with each other.
• Philosophers don’t know if another philosopher is about to die.
• No need to say that philosophers should avoid dying!

You have to write a program for the mandatory part and another one for the bonus part
(if you decide to do the bonus part). They both have to comply with the following rules:
• Global variables are forbidden!
• Your(s) program(s) should take the following arguments:
number_of_philosophers time_to_die time_to_eat time_to_sleep
[number_of_times_each_philosopher_must_eat]
◦ number_of_philosophers: The number of philosophers and also the number
of forks.
◦ time_to_die (in milliseconds): If a philosopher didn’t start eating time_to_die
milliseconds since the beginning of their last meal or the beginning of the simulation, they die.
◦ time_to_eat (in milliseconds): The time it takes for a philosopher to eat.
During that time, they will need to hold two forks.
◦ time_to_sleep (in milliseconds): The time a philosopher will spend sleeping.
◦ number_of_times_each_philosopher_must_eat (optional argument): If all
philosophers have eaten at least number_of_times_each_philosopher_must_eat
times, the simulation stops. If not specified, the simulation stops when a
philosopher dies.
• Each philosopher has a number ranging from 1 to number_of_philosophers.
• Philosopher number 1 sits next to philosopher number number_of_philosophers.
Any other philosopher number N sits between philosopher number N - 1 and philosopher number N + 1.
About the logs of your program:
• Any state change of a philosopher must be formatted as follows:
◦ timestamp_in_ms X has taken a fork
◦ timestamp_in_ms X is eating
◦ timestamp_in_ms X is sleeping
◦ timestamp_in_ms X is thinking
◦ timestamp_in_ms X died
Replace timestamp_in_ms with the current timestamp in milliseconds
and X with the philosopher number.
• A displayed state message should not be mixed up with another message.
• A message announcing a philosopher died should be displayed no more than 10 ms
after the actual death of the philosopher.
• Again, philosophers should avoid dying!
Your program must not have any data races.

The specific rules for the mandatory part are:
• Each philosopher should be a thread.
• There is one fork between each pair of philosophers. Therefore, if there are several
philosophers, each philosopher has a fork on their left side and a fork on their right
side. If there is only one philosopher, there should be only one fork on the table.
• To prevent philosophers from duplicating forks, you should protect the forks state
with a mutex for each of them. 

..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|..|

. round table
. n° forks == n° philosophers
. only one action at a time:
    eat -> sleep -> think
. eating requires two forks

Philosophers should avoid dying and fullfill the program parameters, however,
they are unable to "talk" to each other. This probably means that the threads
that represent them are unable to communicate with each other and only
with the main thread

. each philosopher is a separate thread
. main thread has the "shared" parameters for each thread:
    - number of philosophers / forks / extra threads;
    - time to eat, sleep, think, n° of times to eat;
. main thread has the "shared" variables between each thread:
    - forks available
(each thread will update the number of available forks, be it +2 or -2, so,
the number of forks will work like a "global" variable)

the number of available forks will probably be a shared variable between all the
different threads / philosophers and, as such, will be protected by a mutex
(if i have the ability to manage the behaviour of said mutex, i will probably
see which philosophers as been the longest without eating and give him the
mutex lock)

vai ser mais complicado do que isso:
• There is one fork between each pair of philosophers. Therefore, if there are several
philosophers, each philosopher has a fork on their left side and a fork on their right
side. If there is only one philosopher, there should be only one fork on the table.
• To prevent philosophers from duplicating forks, you should protect the forks state
with a mutex for each of them.

.....
- the function gettimeofday() will probable be used on the status messages when
we inform about each philosophers actions and to check if they get past the
allowed time to do the actions like eating, sleeping, thinking, etc

- how to create threads on a loop video (will use this because i will receive
the number of philosophers as an argument)

Since a thread is represented by a single function, and that each philosopher
should be represented by a single thread, that means each philosopher
will be represented by a function.
Given the looping nature of each philosopher life cycle:
"eat -> sleep -> think", we can already assume an infinite coding loop that
will execute these functions until the expected loop number is met:
◦ number_of_times_each_philosopher_must_eat (optional argument)
or until they cannot meet the stipulations and they, something, for
example, like this

.....

/*
Arguments:
- av[0] titulo do programa
- av[1] number_of_philosophers
- av[2] time_to_die
- av[3] time_to_eat
- av[4] time_to_sleep
- av[5] number_of_times_each_philosopher_must_eat (optional)
*/

...

/*
FORK MUTEX CONCURRENCY (LOCKING AT THE SAME TIME STALEMATE)

-> fork concurrency problem
cada 1 pega num fork e fica so c um e morrem todos
..
algo estranho se passa c o last_ate, ou tou a aceder
ao filosofo / indice errado
(V) -- acrescentar aquilo ao t_person struct
(V) -- associar p e f forks e mutexes de cada person aos respetivos membros
da struct all
(V) -- mudar os pointers fork e mutex na eating status
*/

/*
ATOMIC OPPS

para garantir uma resposta mais rapida, sugeriram sinchronization
mechanisms como atomic operations

o meu problema atual vai ser garantir esta resposta rapida e basicamente
interromper a execucao do life_cycle
se calhar usar o death status como uma atomic operation para declarar logo
a morte de um philosopher, enquanto que o life_cycle naturalmente encontra
o death_status e termina tudo

É o meu grande priblema neste projeto. Eles pedem otimizacao do tempo de
reacao da morte de um philosopher, mas nao me deixam usar atomic
operations.. ou deixam?

1714223941
1714224002
*/

escrever a documentacao so no fim porque pode haver mudancas e coisas que escrevo
mal a meio

-> smaller usleep() timers
corre normalmente, simplesmente tenho death_msg checkers em todo o lado
que nao correm mais mensagem nenhuma caso alguem morra

-> testar arg opcional
parece estar top

-> negative hunger values;
-> use join instead of detach;
/----------------------------------------------------------------/
PROBLEM 1: DEADLOCK SITUATION (getting both forks simultaneously)

i solved that with:
- micro usleep() delay in each thread initialization;
- drop fork and try again mechanism;

Apparently, this situation has been resolved (for now);

/----------------------------------------------------------------/
PROBLEM 2: NO DEATHS PROBLEM (no philosophers die ever)

this is probable due to one of two things:
1 - incorrect timing / overall program logic;
(i am starting a timer too soon, too early, not cheking time some place,
maybe i am doing the actions wrong or interpreting wrong)
2 - not enought mutexes / data protection / data race checking

(2)
- mutex inside each t_person for individual satisfaction?
- the same for individual death_time
/----------------------------------------------------------------/
current:

eles tem que segurar os garfos e os mutexes enquanto comem oh burro do crl
ja mudei
usar o visualizer
agora ate acho que o delay e problema porque
nao preciso de definir uma "ordem"/hierarquia para quem esta ha mais tempo sem comer
porque o scheduler e os mutexes ja fazem isso automaticamente
eu so preciso é de eliminar aquele pequenito delay agora
sera a thread concorrente? que o tempo registado a pedir o tempo, ou as mensagens,
ou wtv. ok agora tenho e que reduzir o delay

delay get_time
é sempre +1ms, -1ms... e eu auto-reprovo-me por causa disso
mas como prevenir?

/----------------------------------------------------------------/
DELAY?

eu noto o timer da get_time a ir ganhando algum delay
no entanto, o delay da hunger vai levando reset e perde tracao

segundo a logica, o delay devera ser de 10ms para ultrapassar os tempos e
algum philo morrer. eu mesmo no get_time demoro prai uns 11/12 segundos a
atingir 10ms de delay, é pouco

get_time_reads ganha delay
last_ate ganha delay
hunger nao ganha delay
hunger deveria ganhar delay para ultrapassar o time_to_die;
para isso, last_ate nao deveria ganhar delay

mas pela logica, nao faz sentido hunger ir ganhando delay
ou seja, vai ficando mais dificil comer?
ou, em vez de delay, deve morrer logo? acho que sim, deve ser face value

o delay pode ser:
- delay natural de carga de CPU
- delay do pedido da funcao de tempo
- delay no mutex de printar

DEADLOCK MANAGEMENT?

lembrei-me agora que pode ser a propria maneira como eu faco gestao do
deadlock que pode fazer com que ninguem morra. se calhar é suposto criar uma
"ordem" para eles comerem, em vez do mecanismo de pegar/largar ate dar
no entanto, se assim for, vai contra as proprias regras do enunciado. nenhum
filosofo pode saber um do outro nem comunicar